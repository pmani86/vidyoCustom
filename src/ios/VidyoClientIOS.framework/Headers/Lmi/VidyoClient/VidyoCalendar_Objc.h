//
//	VidyoCalendar_Objc.h
//	VidyoClient
//
//	This file is auto generated, do not edit this file
//	Copyright (c) 2016 Vidyo, Inc. All rights reserved.
//

#import "VidyoCalendarConnProps_Objc.h"
#import "VidyoMeetingInfo_Objc.h"
#import "VidyoMeeting_Objc.h"
@class VCCalendar;
typedef NS_ENUM(NSInteger, VCCalendarCapabilityKey){
	VCCalendarCapabilityKeySSO,
	VCCalendarCapabilityKeyWebUrl,
	VCCalendarCapabilityKeyWebUrlAutodiscovery,
	VCCalendarCapabilityKeyUsername,
	VCCalendarCapabilityKeyPassword
};
typedef NS_ENUM(NSInteger, VCCalendarCreateCode){
	VCCalendarCreateCodeOk,
	VCCalendarCreateCodeSvcNotRegistered,
	VCCalendarCreateCodeLibraryLoadFailed,
	VCCalendarCreateCodeExistingInstance,
	VCCalendarCreateCodeCalendarPluginConstructFailure,
	VCCalendarCreateCodeCalendarPluginInvalidCredentials,
	VCCalendarCreateCodeCalendarPluginInvalidCalendarId,
	VCCalendarCreateCodeVidyoCalendarConstructFailure,
	VCCalendarCreateCodeVidyoCalendarDestroyed,
	VCCalendarCreateCodeGeneralError
};
typedef NS_ENUM(NSInteger, VCCalendarState){
	VCCalendarStateUnavailable,
	VCCalendarStateInitialized,
	VCCalendarStateConnecting,
	VCCalendarStateConnected,
	VCCalendarStateDisconnecting,
	VCCalendarStateDisconnected
};
typedef NS_ENUM(NSInteger, VCMeetingSearchResult){
	VCMeetingSearchResultOk,
	VCMeetingSearchResultProcessing,
	VCMeetingSearchResultNoRecords,
	VCMeetingSearchResultInvalidIndex,
	VCMeetingSearchResultInvalidDateTimeRange,
	VCMeetingSearchResultNoResponse,
	VCMeetingSearchResultNotConnected,
	VCMeetingSearchResultPluginError,
	VCMeetingSearchResultMiscLocalError,
	VCMeetingSearchResultMiscRemoteError
};
@protocol VCICalendarFeedback
@optional

	-(void) connectResult:(VCCalendar*)c Result:(VCCalendarCreateCode)result;
	-(void) disconnected:(VCCalendar*)c Result:(VCCalendarCreateCode)result;
	-(void) getCapabilitiesResult:(VCCalendar*)c Capabilities:(NSMutableArray*)capabilities Values:(NSMutableArray*)values;
	-(void) getMeetingsResult:(VCCalendar*)c SearchResult:(VCMeetingSearchResult)searchResult Meetings:(NSMutableArray*)meetings CurrentIndex:(unsigned int)currentIndex NumRecords:(unsigned int)numRecords;
	-(void) meetingCreatedById:(VCCalendar*)c M:(VCMeeting*)m R:(VCMeetingActionResult)r CreateToken:(NSMutableString*)createToken;
	-(void) meetingCreatedByService:(VCCalendar*)c M:(VCMeetingInfo*)m;
	-(void) meetingReminder:(VCCalendar*)c M:(VCMeetingInfo*)m;
	-(void) meetingRemovedByService:(VCCalendar*)c M:(VCMeetingInfo*)m;
	-(void) meetingUpdatedByService:(VCCalendar*)c M:(VCMeetingInfo*)m;
	-(void) seriesUpdate:(VCCalendar*)c M:(VCMeetingInfo*)m;
@end
@interface VCCalendarFeedback : NSObject<VCICalendarFeedback>
{
	void* objPtr;
}
	-(id) init;
	-(void) dealloc;
	-(void*)getObjectPtr;
@end
@interface VCCalendar : NSObject
{
	void* objPtr;
}

	@property NSMutableString* id;
	@property VCCalendarState serviceState;
	@property NSMutableString* serviceType;
	-(void) dealloc;
	-(BOOL) connect:(NSMutableArray*)connProperties;
	-(BOOL) createMeetingWithId:(const char*)id Feedback:(VCMeetingFeedback*)feedback CreateToken:(const char*)createToken;
	-(BOOL) disconnect;
	-(BOOL) getCapabilities:(NSMutableArray*)requestedCapabilities;
	-(NSString*) getId;
	-(VCCalendarState) getServiceState;
	-(NSString*) getServiceType;
	-(VCMeetingSearchResult) searchMeetings:(NSMutableString*)searchText BeginDateTime:(NSMutableString*)beginDateTime EndDateTime:(NSMutableString*)endDateTime Index:(unsigned int)index PageSize:(unsigned int)pageSize;
	-(BOOL) searchMeetingsByDay:(unsigned int)year Month:(unsigned int)month Day:(unsigned int)day CreateToken:(NSMutableString*)createToken;
	-(BOOL) setSingleSignOn:(BOOL)setSingleSignOn;
	-(id) initWithObject:(void*)rPtr;
	-(void*)getObjectPtr;
@end
