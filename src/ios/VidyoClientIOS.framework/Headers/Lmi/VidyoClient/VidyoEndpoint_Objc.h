//
//	VidyoEndpoint_Objc.h
//	VidyoClient
//
//	This file is auto generated, do not edit this file
//	Copyright (c) 2016 Vidyo, Inc. All rights reserved.
//

#import "VidyoAudioFrame_Objc.h"
#import "VidyoChatMessage_Objc.h"
#import "VidyoContactInfo_Objc.h"
#import "VidyoContact_Objc.h"
#import "VidyoDevice_Objc.h"
#import "VidyoEventSchedule_Objc.h"
#import "VidyoLocalCamera_Objc.h"
#import "VidyoLocalMicrophone_Objc.h"
#import "VidyoLocalMonitor_Objc.h"
#import "VidyoLocalRenderer_Objc.h"
#import "VidyoLocalSpeaker_Objc.h"
#import "VidyoLocalWindowShare_Objc.h"
#import "VidyoLogRecord_Objc.h"
#import "VidyoNetworkInterface_Objc.h"
#import "VidyoParticipant_Objc.h"
#import "VidyoProperty_Objc.h"
#import "VidyoRemoteCamera_Objc.h"
#import "VidyoRemoteMicrophone_Objc.h"
#import "VidyoRemoteRenderer_Objc.h"
#import "VidyoRemoteSpeaker_Objc.h"
#import "VidyoRemoteWindowShare_Objc.h"
#import "VidyoRoomProperties_Objc.h"
#import "VidyoStatistics_Objc.h"
#import "VidyoVideoFrame_Objc.h"
@class VCCall;
@class VCEndpoint;
@class VCLoggerCategory;
@class VCRoom;
@class VCRoomInfo;
@class VCTenantCapabilities;
@class VCUser;
@class VCUserAuthenticationInfo;
@class VCUserLoginInfo;
typedef NS_ENUM(NSInteger, VCCallEndReason){
	VCCallEndReasonEnded,
	VCCallEndReasonConnectionFailed,
	VCCallEndReasonConnectionLost,
	VCCallEndReasonParticipantBusy,
	VCCallEndReasonParticipantRejected,
	VCCallEndReasonParticipantEnded,
	VCCallEndReasonMiscError
};
typedef NS_ENUM(NSInteger, VCCallInitiatedResult){
	VCCallInitiatedResultOK,
	VCCallInitiatedResultCancelled,
	VCCallInitiatedResultNoResponse,
	VCCallInitiatedResultUnknownParticipant,
	VCCallInitiatedResultMiscLocalError,
	VCCallInitiatedResultMiscRemoteError
};
typedef NS_ENUM(NSInteger, VCClientAppLogLevel){
	VCClientAppLogLevelInfo,
	VCClientAppLogLevelDebug,
	VCClientAppLogLevelWarning,
	VCClientAppLogLevelError
};
typedef NS_ENUM(NSInteger, VCEndpointBaseTransportType){
	VCEndpointBaseTransportTypeTLS,
	VCEndpointBaseTransportTypeTCP,
	VCEndpointBaseTransportTypeUDP
};
typedef NS_ENUM(NSInteger, VCEndpointLogCompressionResult){
	VCEndpointLogCompressionResultSuccess,
	VCEndpointLogCompressionResultMiscError
};
typedef NS_ENUM(NSInteger, VCEndpointMediaState){
	VCEndpointMediaStateIdle,
	VCEndpointMediaStateGreenRoom,
	VCEndpointMediaStateLive
};
typedef NS_ENUM(NSInteger, VCEndpointMode){
	VCEndpointModeDefault,
	VCEndpointModeForeground,
	VCEndpointModeBackground
};
typedef NS_ENUM(NSInteger, VCEndpointTone){
	VCEndpointToneJoin,
	VCEndpointToneLeave,
	VCEndpointToneMsgRecv,
	VCEndpointToneMsgSend,
	VCEndpointToneRing,
	VCEndpointToneMax
};
typedef NS_ENUM(NSInteger, VCEndpointTradeOffProfile){
	VCEndpointTradeOffProfileHigh,
	VCEndpointTradeOffProfileMedium,
	VCEndpointTradeOffProfileLow
};
typedef NS_ENUM(NSInteger, VCRoomDeleteResult){
	VCRoomDeleteResultOK,
	VCRoomDeleteResultNoResponse,
	VCRoomDeleteResultUnauthorized,
	VCRoomDeleteResultOutOfResources,
	VCRoomDeleteResultMiscError
};
typedef NS_ENUM(NSInteger, VCRoomEnterResult){
	VCRoomEnterResultOK,
	VCRoomEnterResultCancelled,
	VCRoomEnterResultNoResponse,
	VCRoomEnterResultInvalidPassword,
	VCRoomEnterResultUnknownRoom,
	VCRoomEnterResultRoomFull,
	VCRoomEnterResultNotMember,
	VCRoomEnterResultBanned,
	VCRoomEnterResultMiscLocalError,
	VCRoomEnterResultMiscRemoteError
};
typedef NS_ENUM(NSInteger, VCRoomExitReason){
	VCRoomExitReasonLeft,
	VCRoomExitReasonConnectionLost,
	VCRoomExitReasonSessionConnectionLost,
	VCRoomExitReasonMembershipConnectionLost,
	VCRoomExitReasonNoResponse,
	VCRoomExitReasonProtocolViolation,
	VCRoomExitReasonBooted,
	VCRoomExitReasonShuttingDown,
	VCRoomExitReasonMiscLocalError,
	VCRoomExitReasonMiscRemoteError
};
typedef NS_ENUM(NSInteger, VCRoomGetPropertiesResult){
	VCRoomGetPropertiesResultOK,
	VCRoomGetPropertiesResultNoResponse,
	VCRoomGetPropertiesResultUnauthorized,
	VCRoomGetPropertiesResultMiscLocalError,
	VCRoomGetPropertiesResultMiscRemoteError
};
typedef NS_ENUM(NSInteger, VCRoomInviteResult){
	VCRoomInviteResultOK,
	VCRoomInviteResultNoResponse,
	VCRoomInviteResultUnauthorized,
	VCRoomInviteResultOutOfResources,
	VCRoomInviteResultMiscError,
	VCRoomInviteResultUserIsOffline,
	VCRoomInviteResultServerError
};
typedef NS_ENUM(NSInteger, VCRoomMediaDisableReason){
	VCRoomMediaDisableReasonDisabled,
	VCRoomMediaDisableReasonSignalingConnectionLost,
	VCRoomMediaDisableReasonMediaConnectionLost,
	VCRoomMediaDisableReasonBooted,
	VCRoomMediaDisableReasonSessionTerminated,
	VCRoomMediaDisableReasonServerShuttingDown,
	VCRoomMediaDisableReasonConferenceDestroyed,
	VCRoomMediaDisableReasonMiscLocalError,
	VCRoomMediaDisableReasonMiscRemoteError
};
typedef NS_ENUM(NSInteger, VCRoomMediaFailReason){
	VCRoomMediaFailReasonCancelled,
	VCRoomMediaFailReasonNoConference,
	VCRoomMediaFailReasonSignalingConnectionLost,
	VCRoomMediaFailReasonMediaConnectionLost,
	VCRoomMediaFailReasonNoResponse,
	VCRoomMediaFailReasonInvalidPassword,
	VCRoomMediaFailReasonRoomIsFull,
	VCRoomMediaFailReasonInvalidRoomKey,
	VCRoomMediaFailReasonRoomDisabled,
	VCRoomMediaFailReasonAllLinesInUse,
	VCRoomMediaFailReasonConnectionError,
	VCRoomMediaFailReasonInvalidRoom,
	VCRoomMediaFailReasonConferenceLocked,
	VCRoomMediaFailReasonSeatLicenseExpired,
	VCRoomMediaFailReasonNotLicensed,
	VCRoomMediaFailReasonRejected,
	VCRoomMediaFailReasonUnknownError,
	VCRoomMediaFailReasonMiscLocalError,
	VCRoomMediaFailReasonMiscRemoteError
};
typedef NS_ENUM(NSInteger, VCRoomProfileControlMode){
	VCRoomProfileControlModeAlwaysOn,
	VCRoomProfileControlModeAlwaysOff,
	VCRoomProfileControlModeDefault
};
typedef NS_ENUM(NSInteger, VCRoomSearchResult){
	VCRoomSearchResultOK,
	VCRoomSearchResultNoRecords,
	VCRoomSearchResultNoResponse,
	VCRoomSearchResultUnauthorized,
	VCRoomSearchResultMiscLocalError,
	VCRoomSearchResultMiscRemoteError
};
typedef NS_ENUM(NSInteger, VCRoomSetFavoriteResult){
	VCRoomSetFavoriteResultOK,
	VCRoomSetFavoriteResultNoResponse,
	VCRoomSetFavoriteResultConflict,
	VCRoomSetFavoriteResultUnauthorized,
	VCRoomSetFavoriteResultNotAcceptable,
	VCRoomSetFavoriteResultNotAllowed,
	VCRoomSetFavoriteResultMiscLocalError,
	VCRoomSetFavoriteResultMiscRemoteError
};
typedef NS_ENUM(NSInteger, VCRoomSetPropertiesResult){
	VCRoomSetPropertiesResultOK,
	VCRoomSetPropertiesResultNoResponse,
	VCRoomSetPropertiesResultConflict,
	VCRoomSetPropertiesResultUnauthorized,
	VCRoomSetPropertiesResultNotAcceptable,
	VCRoomSetPropertiesResultNotAllowed,
	VCRoomSetPropertiesResultMiscLocalError,
	VCRoomSetPropertiesResultMiscRemoteError
};
typedef NS_ENUM(NSInteger, VCRoomState){
	VCRoomStateCreating,
	VCRoomStateCreated,
	VCRoomStateEntering,
	VCRoomStateEntered,
	VCRoomStateMediaRouteAcquiring,
	VCRoomStateMediaRouteAcquired,
	VCRoomStateMediaEnabling,
	VCRoomStateMediaEnabled,
	VCRoomStateMediaDisabling,
	VCRoomStateMediaDisabled,
	VCRoomStateExiting,
	VCRoomStateExited
};
typedef NS_ENUM(NSInteger, VCRoomType){
	VCRoomTypeUnknown,
	VCRoomTypeConversation,
	VCRoomTypeTopic,
	VCRoomTypeScheduled,
	VCRoomTypePersonal,
	VCRoomTypeTestCall,
	VCRoomTypeLegacy
};
typedef NS_ENUM(NSInteger, VCRoomSearchField){
	VCRoomSearchFieldOwner,
	VCRoomSearchFieldAdmin,
	VCRoomSearchFieldModerator,
	VCRoomSearchFieldMember,
	VCRoomSearchFieldUser,
	VCRoomSearchFieldName,
	VCRoomSearchFieldSubject,
	VCRoomSearchFieldType,
	VCRoomSearchFieldPublic,
	VCRoomSearchFieldNonMembers
};
typedef NS_ENUM(NSInteger, VCRoomSearchFieldRelation){
	VCRoomSearchFieldRelationAND,
	VCRoomSearchFieldRelationOR
};
typedef NS_ENUM(NSInteger, VCUserAuthType){
	VCUserAuthTypeGuest,
	VCUserAuthTypePassword,
	VCUserAuthTypeAccessToken,
	VCUserAuthTypeRefreshToken,
	VCUserAuthTypeProvisionToken,
	VCUserAuthTypeFacebook,
	VCUserAuthTypeSaml,
	VCUserAuthTypeCac
};
typedef NS_ENUM(NSInteger, VCUserCallCreateResult){
	VCUserCallCreateResultOK,
	VCUserCallCreateResultNoResponse,
	VCUserCallCreateResultNotAllowed,
	VCUserCallCreateResultMiscLocalError,
	VCUserCallCreateResultMiscRemoteError
};
typedef NS_ENUM(NSInteger, VCUserConnectionStatusChangedReason){
	VCUserConnectionStatusChangedReasonOK,
	VCUserConnectionStatusChangedReasonLostContactWithServer,
	VCUserConnectionStatusChangedReasonNoCommunicationWithServer,
	VCUserConnectionStatusChangedReasonNoValidNetworkInterfaces,
	VCUserConnectionStatusChangedReasonNetworkInterfaceChanged,
	VCUserConnectionStatusChangedReasonMiscNetworkError,
	VCUserConnectionStatusChangedReasonConnectionError
};
typedef NS_ENUM(NSInteger, VCUserGetAuthTypesResult){
	VCUserGetAuthTypesResultOK,
	VCUserGetAuthTypesResultConnectionFailed,
	VCUserGetAuthTypesResultConnectionLost,
	VCUserGetAuthTypesResultConnectionTimeout,
	VCUserGetAuthTypesResultNoResponse,
	VCUserGetAuthTypesResultWebProxyAuthenticationFailed,
	VCUserGetAuthTypesResultTlsFailed,
	VCUserGetAuthTypesResultServiceUnavailable,
	VCUserGetAuthTypesResultMiscLocalError,
	VCUserGetAuthTypesResultMiscRemoteError,
	VCUserGetAuthTypesResultUnSupportedTenantVersion,
	VCUserGetAuthTypesResultNoValidNetworkInterface
};
typedef NS_ENUM(NSInteger, VCUserGetContactResult){
	VCUserGetContactResultOK,
	VCUserGetContactResultNoResponse,
	VCUserGetContactResultUnauthorized,
	VCUserGetContactResultMiscLocalError,
	VCUserGetContactResultMiscRemoteError
};
typedef NS_ENUM(NSInteger, VCUserLoginResult){
	VCUserLoginResultOK,
	VCUserLoginResultConnectionFailed,
	VCUserLoginResultConnectionLost,
	VCUserLoginResultConnectionTimeout,
	VCUserLoginResultNoResponse,
	VCUserLoginResultTerminated,
	VCUserLoginResultInvalidUser,
	VCUserLoginResultInvalidPassword,
	VCUserLoginResultMiscAuthError,
	VCUserLoginResultCancelled,
	VCUserLoginResultMiscError,
	VCUserLoginResultWebProxyAuthenticationRequired,
	VCUserLoginResultServiceUnavailable,
	VCUserLoginResultRoomIsFull,
	VCUserLoginResultRoomIsDisabled,
	VCUserLoginResultTlsFailed,
	VCUserLoginResultCertificateVerificationFailed,
	VCUserLoginResultUnsupportedTenantVersion,
	VCUserLoginResultNoValidNetworkInterface
};
typedef NS_ENUM(NSInteger, VCUserLogoutReason){
	VCUserLogoutReasonLoggedOut,
	VCUserLogoutReasonConnectionLost,
	VCUserLogoutReasonConnectionTimeout,
	VCUserLogoutReasonNoResponse,
	VCUserLogoutReasonTerminated,
	VCUserLogoutReasonMiscError,
	VCUserLogoutReasonLoggedInElsewhere,
	VCUserLogoutReasonNetworkInterfaceChanged,
	VCUserLogoutReasonOutOfLicenses,
	VCUserLogoutReasonEpClientBadConnection,
	VCUserLogoutReasonEpClientBadVersion,
	VCUserLogoutReasonEpClientBadSessionId,
	VCUserLogoutReasonEpClientBadComms,
	VCUserLogoutReasonEpClientRebootRequested,
	VCUserLogoutReasonEpClientShutdownRequested,
	VCUserLogoutReasonEpClientRestartRequested,
	VCUserLogoutReasonEpClientInternalError,
	VCUserLogoutReasonEndpointNotBound,
	VCUserLogoutReasonInvalidAuth,
	VCUserLogoutReasonEpClientStartFailure
};
typedef NS_ENUM(NSInteger, VCUserRoomCreateResult){
	VCUserRoomCreateResultOK,
	VCUserRoomCreateResultNoResponse,
	VCUserRoomCreateResultNotFound,
	VCUserRoomCreateResultUnauthorized,
	VCUserRoomCreateResultMiscLocalError,
	VCUserRoomCreateResultMiscRemoteError,
	VCUserRoomCreateResultDuplicateName,
	VCUserRoomCreateResultLimitReached,
	VCUserRoomCreateResultNotSupported
};
typedef NS_ENUM(NSInteger, VCUserSearchField){
	VCUserSearchFieldUID,
	VCUserSearchFieldEMAIL,
	VCUserSearchFieldNAME,
	VCUserSearchFieldTELNO
};
typedef NS_ENUM(NSInteger, VCUserSearchResult){
	VCUserSearchResultOK,
	VCUserSearchResultNoRecords,
	VCUserSearchResultNoResponse,
	VCUserSearchResultMiscLocalError,
	VCUserSearchResultMiscRemoteError
};
typedef NS_ENUM(NSInteger, VCUserState){
	VCUserStateIdle,
	VCUserStateLoggingIn,
	VCUserStateLoggedIn,
	VCUserStateReconnecting,
	VCUserStateRequestingAuthenticationTypes
};
typedef NS_ENUM(NSInteger, VCUserTokenType){
	VCUserTokenTypeRefreshToken,
	VCUserTokenTypeAccessToken
};
@interface VCEndpointPkg : NSObject
{}

	+(NSString*) getBuildTag;
	+(NSString*) getVersion;
	+(NSString*) getVersionWithoutBuildNumber;
	+(BOOL) vcInitialize;
	+(BOOL) setExperimentalOptions:(const char*)options;
	+(void) uninitialize;
@end
@protocol VCCallIAccept

	-(void) onInitiated:(VCCallInitiatedResult)result P:(VCParticipant*)p;
	-(void) onEnded:(VCParticipant*)p Reason:(VCCallEndReason)reason;
@end
@protocol VCCallIRegisterMessageEventListener

	-(void) onMessageReceived:(VCParticipant*)participant ChatMessage:(VCChatMessage*)chatMessage;
	-(void) onMessageAcknowledged:(VCChatMessage*)chatMessage;
	-(void) onMessageRead:(VCParticipant*)participant MessageId:(long long)messageId;
	-(void) onMessageTypingIndication:(VCParticipant*)participant TypingIndication:(VCChatMessageTypingIndication)typingIndication;
@end
@protocol VCCallIRegisterSubjectEventListener

	-(void) onSetSubject:(const char*)subject;
@end
@interface VCCall : NSObject
{
	void* objPtr;
	@public
	id<VCCallIAccept> callIAccept;
	id<VCCallIRegisterMessageEventListener> callIRegisterMessageEventListener;
	id<VCCallIRegisterSubjectEventListener> callIRegisterSubjectEventListener;
}

	@property NSMutableString* id;
	-(void) dealloc;
	-(BOOL) accept:(id<VCCallIAccept>)callIAccept;
	-(NSString*) getId;
	-(BOOL) getParticipants:(NSMutableArray*)participants;
	-(BOOL) getRemoteRenderers:(NSMutableArray*)renderers;
	-(BOOL) getRemoteSpeakers:(NSMutableArray*)speakers;
	-(const char*) getSubject;
	-(VCUser*) getUser;
	-(void) hangUp;
	-(BOOL) initiate:(id<VCCallIAccept>)callIAccept;
	-(BOOL) registerMessageEventListener:(id<VCCallIRegisterMessageEventListener>)callIRegisterMessageEventListener;
	-(BOOL) registerSubjectEventListener:(id<VCCallIRegisterSubjectEventListener>)callIRegisterSubjectEventListener;
	-(void) reject;
	-(BOOL) sendMessage:(const char*)message;
	-(BOOL) setSubject:(const char*)subject;
	-(id) initWithObject:(void*)rPtr;
	-(void*)getObjectPtr;
@end
@protocol VCEndpointICompressLogs

	-(void) onLogCompressionComplete:(NSMutableString*)compressedFileName Result:(VCEndpointLogCompressionResult)result;
@end
@protocol VCEndpointIRegisterLocalCameraEventListener

	-(void) onLocalCameraAdded:(VCLocalCamera*)localCamera;
	-(void) onLocalCameraRemoved:(VCLocalCamera*)localCamera;
	-(void) onLocalCameraSelected:(VCLocalCamera*)localCamera;
	-(void) onLocalCameraStateUpdated:(VCLocalCamera*)localCamera State:(VCDeviceState)state;
@end
@protocol VCEndpointIRegisterLocalCameraFrameListener

	-(void) onLocalCameraFrame:(VCLocalCamera*)localCamera VideoFrame:(VCVideoFrame*)videoFrame;
@end
@protocol VCEndpointIRegisterLocalMicrophoneEnergyListener

	-(void) onLocalMicrophoneEnergy:(VCLocalMicrophone*)localMicrophone AudioEnergy:(int)audioEnergy;
@end
@protocol VCEndpointIRegisterLocalMicrophoneEventListener

	-(void) onLocalMicrophoneAdded:(VCLocalMicrophone*)localMicrophone;
	-(void) onLocalMicrophoneRemoved:(VCLocalMicrophone*)localMicrophone;
	-(void) onLocalMicrophoneSelected:(VCLocalMicrophone*)localMicrophone;
	-(void) onLocalMicrophoneStateUpdated:(VCLocalMicrophone*)localMicrophone State:(VCDeviceState)state;
@end
@protocol VCEndpointIRegisterLocalMicrophoneFrameListener

	-(void) onLocalMicrophoneFrame:(VCLocalMicrophone*)localMicrophone AudioFrame:(VCAudioFrame*)audioFrame;
@end
@protocol VCEndpointIRegisterLocalMonitorEventListener

	-(void) onLocalMonitorAdded:(VCLocalMonitor*)localMonitor;
	-(void) onLocalMonitorRemoved:(VCLocalMonitor*)localMonitor;
	-(void) onLocalMonitorSelected:(VCLocalMonitor*)localMonitor;
	-(void) onLocalMonitorStateUpdated:(VCLocalMonitor*)localMonitor State:(VCDeviceState)state;
@end
@protocol VCEndpointIRegisterLocalMonitorFrameListener

	-(void) onLocalMonitorFrame:(VCLocalMonitor*)localMonitor VideoFrame:(VCVideoFrame*)videoFrame;
@end
@protocol VCEndpointIRegisterLocalRendererEventListener

	-(void) onLocalRendererAdded:(VCLocalRenderer*)localRenderer;
	-(void) onLocalRendererRemoved:(VCLocalRenderer*)localRenderer;
	-(void) onLocalRendererSelected:(VCLocalRenderer*)localRenderer;
	-(void) onLocalRendererStateUpdated:(VCLocalRenderer*)localRenderer State:(VCDeviceState)state;
@end
@protocol VCEndpointIRegisterLocalSpeakerEventListener

	-(void) onLocalSpeakerAdded:(VCLocalSpeaker*)localSpeaker;
	-(void) onLocalSpeakerRemoved:(VCLocalSpeaker*)localSpeaker;
	-(void) onLocalSpeakerSelected:(VCLocalSpeaker*)localSpeaker;
	-(void) onLocalSpeakerStateUpdated:(VCLocalSpeaker*)localSpeaker State:(VCDeviceState)state;
@end
@protocol VCEndpointIRegisterLocalWindowShareEventListener

	-(void) onLocalWindowShareAdded:(VCLocalWindowShare*)localWindowShare;
	-(void) onLocalWindowShareRemoved:(VCLocalWindowShare*)localWindowShare;
	-(void) onLocalWindowShareSelected:(VCLocalWindowShare*)localWindowShare;
	-(void) onLocalWindowShareStateUpdated:(VCLocalWindowShare*)localWindowShare State:(VCDeviceState)state;
@end
@protocol VCEndpointIRegisterLocalWindowShareFrameListener

	-(void) onLocalWindowShareFrame:(VCLocalWindowShare*)localWindowShare VideoFrame:(VCVideoFrame*)videoFrame;
@end
@protocol VCEndpointIRegisterLogEventListener

	-(void) onLog:(VCLogRecord*)logRecord;
@end
@protocol VCEndpointIRegisterNetworkInterfaceEventListener

	-(void) onNetworkInterfaceAdded:(VCNetworkInterface*)networkInterface;
	-(void) onNetworkInterfaceRemoved:(VCNetworkInterface*)networkInterface;
	-(void) onNetworkInterfaceSelected:(VCNetworkInterface*)networkInterface TransportType:(VCNetworkInterfaceTransportType)transportType;
	-(void) onNetworkInterfaceStateUpdated:(VCNetworkInterface*)networkInterface State:(VCNetworkInterfaceState)state;
@end
@protocol VCEndpointIRegisterRemoteCameraEventListener

	-(void) onRemoteCameraAdded:(VCRemoteCamera*)remoteCamera User:(VCUser*)user Call:(VCCall*)call Room:(VCRoom*)room Participant:(VCParticipant*)participant;
	-(void) onRemoteCameraRemoved:(VCRemoteCamera*)remoteCamera User:(VCUser*)user Call:(VCCall*)call Room:(VCRoom*)room Participant:(VCParticipant*)participant;
	-(void) onRemoteCameraStateUpdated:(VCRemoteCamera*)remoteCamera User:(VCUser*)user Call:(VCCall*)call Room:(VCRoom*)room Participant:(VCParticipant*)participant State:(VCDeviceState)state;
@end
@protocol VCEndpointIRegisterRemoteCameraFrameListener

	-(void) onRemoteCameraFrame:(VCRemoteCamera*)remoteCamera Participant:(VCParticipant*)participant VideoFrame:(VCVideoFrame*)videoFrame;
@end
@protocol VCEndpointIRegisterRemoteMicrophoneEnergyListener

	-(void) onRemoteMicrophoneEnergy:(VCRemoteMicrophone*)remoteMicrophone Participant:(VCParticipant*)participant AudioEnergy:(int)audioEnergy;
@end
@protocol VCEndpointIRegisterRemoteMicrophoneEventListener

	-(void) onRemoteMicrophoneAdded:(VCRemoteMicrophone*)remoteMicrophone User:(VCUser*)user Call:(VCCall*)call Room:(VCRoom*)room Participant:(VCParticipant*)participant;
	-(void) onRemoteMicrophoneRemoved:(VCRemoteMicrophone*)remoteMicrophone User:(VCUser*)user Call:(VCCall*)call Room:(VCRoom*)room Participant:(VCParticipant*)participant;
	-(void) onRemoteMicrophoneStateUpdated:(VCRemoteMicrophone*)remoteMicrophone User:(VCUser*)user Call:(VCCall*)call Room:(VCRoom*)room Participant:(VCParticipant*)participant State:(VCDeviceState)state;
@end
@protocol VCEndpointIRegisterRemoteMicrophoneFrameListener

	-(void) onRemoteMicrophoneFrame:(VCRemoteMicrophone*)remoteMicrophone Participant:(VCParticipant*)participant AudioFrame:(VCAudioFrame*)audioFrame;
@end
@protocol VCEndpointIRegisterRemoteRendererEventListener

	-(void) onRemoteRendererAdded:(VCRemoteRenderer*)remoteRenderer User:(VCUser*)user Call:(VCCall*)call Room:(VCRoom*)room;
	-(void) onRemoteRendererRemoved:(VCRemoteRenderer*)remoteRenderer User:(VCUser*)user Call:(VCCall*)call Room:(VCRoom*)room;
@end
@protocol VCEndpointIRegisterRemoteSpeakerEventListener

	-(void) onRemoteSpeakerAdded:(VCRemoteSpeaker*)remoteSpeaker User:(VCUser*)user Call:(VCCall*)call Room:(VCRoom*)room;
	-(void) onRemoteSpeakerRemoved:(VCRemoteSpeaker*)remoteSpeaker User:(VCUser*)user Call:(VCCall*)call Room:(VCRoom*)room;
@end
@protocol VCEndpointIRegisterRemoteWindowShareEventListener

	-(void) onRemoteWindowShareAdded:(VCRemoteWindowShare*)remoteWindowShare User:(VCUser*)user Call:(VCCall*)call Room:(VCRoom*)room Participant:(VCParticipant*)participant;
	-(void) onRemoteWindowShareRemoved:(VCRemoteWindowShare*)remoteWindowShare User:(VCUser*)user Call:(VCCall*)call Room:(VCRoom*)room Participant:(VCParticipant*)participant;
	-(void) onRemoteWindowShareStateUpdated:(VCRemoteWindowShare*)remoteWindowShare User:(VCUser*)user Call:(VCCall*)call Room:(VCRoom*)room Participant:(VCParticipant*)participant State:(VCDeviceState)state;
@end
@protocol VCEndpointIRegisterRemoteWindowShareFrameListener

	-(void) onRemoteWindowShareFrame:(VCRemoteWindowShare*)remoteWindowShare Participant:(VCParticipant*)participant VideoFrame:(VCVideoFrame*)videoFrame;
@end
@interface VCEndpoint : NSObject
{
	void* objPtr;
	@public
	id<VCEndpointICompressLogs> endpointICompressLogs;
	id<VCEndpointIRegisterLocalCameraEventListener> endpointIRegisterLocalCameraEventListener;
	id<VCEndpointIRegisterLocalCameraFrameListener> endpointIRegisterLocalCameraFrameListener;
	id<VCEndpointIRegisterLocalMicrophoneEnergyListener> endpointIRegisterLocalMicrophoneEnergyListener;
	id<VCEndpointIRegisterLocalMicrophoneEventListener> endpointIRegisterLocalMicrophoneEventListener;
	id<VCEndpointIRegisterLocalMicrophoneFrameListener> endpointIRegisterLocalMicrophoneFrameListener;
	id<VCEndpointIRegisterLocalMonitorEventListener> endpointIRegisterLocalMonitorEventListener;
	id<VCEndpointIRegisterLocalMonitorFrameListener> endpointIRegisterLocalMonitorFrameListener;
	id<VCEndpointIRegisterLocalRendererEventListener> endpointIRegisterLocalRendererEventListener;
	id<VCEndpointIRegisterLocalSpeakerEventListener> endpointIRegisterLocalSpeakerEventListener;
	id<VCEndpointIRegisterLocalWindowShareEventListener> endpointIRegisterLocalWindowShareEventListener;
	id<VCEndpointIRegisterLocalWindowShareFrameListener> endpointIRegisterLocalWindowShareFrameListener;
	id<VCEndpointIRegisterLogEventListener> endpointIRegisterLogEventListener;
	id<VCEndpointIRegisterNetworkInterfaceEventListener> endpointIRegisterNetworkInterfaceEventListener;
	id<VCEndpointIRegisterRemoteCameraEventListener> endpointIRegisterRemoteCameraEventListener;
	id<VCEndpointIRegisterRemoteCameraFrameListener> endpointIRegisterRemoteCameraFrameListener;
	id<VCEndpointIRegisterRemoteMicrophoneEnergyListener> endpointIRegisterRemoteMicrophoneEnergyListener;
	id<VCEndpointIRegisterRemoteMicrophoneEventListener> endpointIRegisterRemoteMicrophoneEventListener;
	id<VCEndpointIRegisterRemoteMicrophoneFrameListener> endpointIRegisterRemoteMicrophoneFrameListener;
	id<VCEndpointIRegisterRemoteRendererEventListener> endpointIRegisterRemoteRendererEventListener;
	id<VCEndpointIRegisterRemoteSpeakerEventListener> endpointIRegisterRemoteSpeakerEventListener;
	id<VCEndpointIRegisterRemoteWindowShareEventListener> endpointIRegisterRemoteWindowShareEventListener;
	id<VCEndpointIRegisterRemoteWindowShareFrameListener> endpointIRegisterRemoteWindowShareFrameListener;
}

	-(id) init:(void*)viewId ViewStyle:(VCLocalRendererViewStyle)viewStyle RemoteParticipants:(unsigned int)remoteParticipants ConsoleLogFilter:(const char*)consoleLogFilter LogFileFilter:(const char*)logFileFilter LogFileName:(const char*)logFileName;
	-(void) dealloc;
	-(void) appLog:(VCClientAppLogLevel)logLevel LogMsg:(NSMutableString*)logMsg;
	-(BOOL) assignViewToCompositeRenderer:(void*)viewId ViewStyle:(VCLocalRendererViewStyle)viewStyle RemoteParticipants:(unsigned int)remoteParticipants;
	-(BOOL) assignViewToLocalCamera:(void*)viewId LocalCamera:(VCLocalCamera*)localCamera DisplayCropped:(BOOL)displayCropped AllowZoom:(BOOL)allowZoom;
	-(BOOL) assignViewToLocalMonitor:(void*)viewId LocalMonitor:(VCLocalMonitor*)localMonitor DisplayCropped:(BOOL)displayCropped AllowZoom:(BOOL)allowZoom;
	-(BOOL) assignViewToLocalWindowShare:(void*)viewId LocalWindowShare:(VCLocalWindowShare*)localWindowShare DisplayCropped:(BOOL)displayCropped AllowZoom:(BOOL)allowZoom;
	-(BOOL) assignViewToRemoteCamera:(void*)viewId RemoteCamera:(VCRemoteCamera*)remoteCamera DisplayCropped:(BOOL)displayCropped AllowZoom:(BOOL)allowZoom;
	-(BOOL) assignViewToRemoteWindowShare:(void*)viewId RemoteWindowShare:(VCRemoteWindowShare*)remoteWindowShare DisplayCropped:(BOOL)displayCropped AllowZoom:(BOOL)allowZoom;
	-(BOOL) compressLogs:(NSMutableString*)compressedFileName EndpointICompressLogs:(id<VCEndpointICompressLogs>)endpointICompressLogs;
	-(BOOL) createRenderer:(VCLocalMonitor*)monitor Width:(unsigned int)width Height:(unsigned int)height;
	-(BOOL) createRendererFromViewId:(void*)viewId X:(int)x Y:(int)y Width:(unsigned int)width Height:(unsigned int)height;
	-(BOOL) createRendererMultiScreen;
	-(BOOL) cycleCamera;
	-(BOOL) cycleMicrophone;
	-(BOOL) cycleSpeaker;
	-(void) disable;
	-(void) disableDebug;
	-(BOOL) enableDebug:(unsigned int)port LogFilter:(const char*)logFilter;
	-(BOOL) enableFileLogger:(const char*)logFileName LogFileFilter:(const char*)logFileFilter;
	-(NSString*) getApplicationTag;
	-(VCEndpointTradeOffProfile) getCpuTradeOffProfile;
	-(BOOL) getFileLoggerCategoryList:(NSMutableArray*)categories;
	-(NSString*) getId;
	-(BOOL) getProductInfo:(NSMutableArray*)productInfo SupportedFeature:(NSMutableArray*)supportedFeature;
	-(VCEndpointStats*) getStats;
	-(NSMutableString*) getStatsJson;
	-(BOOL) hideView:(void*)viewId;
	-(BOOL) isDebugEnabled;
	-(void) localCameraSelectAdvanced:(VCLocalCamera*)localCamera;
	-(void) localCameraUnselectAdvanced:(VCLocalCamera*)localCamera;
	-(void) localMicrophoneSelectAdvanced:(VCLocalMicrophone*)localMicrophone PreviewedPreCall:(BOOL)previewedPreCall;
	-(void) localMicrophoneUnselectAdvanced:(VCLocalMicrophone*)localMicrophone;
	-(void) localMonitorSelectAdvanced:(VCLocalMonitor*)localMonitor;
	-(void) localMonitorUnselectAdvanced:(VCLocalMonitor*)localMonitor;
	-(void) localRendererSelectAdvanced:(VCLocalRenderer*)localRenderer;
	-(void) localRendererUnselectAdvanced:(VCLocalRenderer*)localRenderer;
	-(void) localSpeakerSelectAdvanced:(VCLocalSpeaker*)localSpeaker;
	-(void) localSpeakerUnselectAdvanced:(VCLocalSpeaker*)localSpeaker;
	-(void) localWindowShareSelectAdvanced:(VCLocalWindowShare*)localWindowShare;
	-(void) localWindowShareUnselectAdvanced:(VCLocalWindowShare*)localWindowShare;
	-(BOOL) registerLocalCameraEventListener:(id<VCEndpointIRegisterLocalCameraEventListener>)endpointIRegisterLocalCameraEventListener;
	-(BOOL) registerLocalCameraFrameListener:(VCLocalCamera*)localCamera EndpointIRegisterLocalCameraFrameListener:(id<VCEndpointIRegisterLocalCameraFrameListener>)endpointIRegisterLocalCameraFrameListener Width:(unsigned int)width Height:(unsigned int)height FrameInterval:(long)frameInterval;
	-(BOOL) registerLocalMicrophoneEnergyListener:(id<VCEndpointIRegisterLocalMicrophoneEnergyListener>)endpointIRegisterLocalMicrophoneEnergyListener;
	-(BOOL) registerLocalMicrophoneEventListener:(id<VCEndpointIRegisterLocalMicrophoneEventListener>)endpointIRegisterLocalMicrophoneEventListener;
	-(BOOL) registerLocalMicrophoneFrameListener:(VCLocalMicrophone*)localMicrophone EndpointIRegisterLocalMicrophoneFrameListener:(id<VCEndpointIRegisterLocalMicrophoneFrameListener>)endpointIRegisterLocalMicrophoneFrameListener;
	-(BOOL) registerLocalMonitorEventListener:(id<VCEndpointIRegisterLocalMonitorEventListener>)endpointIRegisterLocalMonitorEventListener;
	-(BOOL) registerLocalMonitorFrameListener:(VCLocalMonitor*)localMonitor EndpointIRegisterLocalMonitorFrameListener:(id<VCEndpointIRegisterLocalMonitorFrameListener>)endpointIRegisterLocalMonitorFrameListener Width:(unsigned int)width Height:(unsigned int)height FrameInterval:(long)frameInterval;
	-(BOOL) registerLocalRendererEventListener:(id<VCEndpointIRegisterLocalRendererEventListener>)endpointIRegisterLocalRendererEventListener;
	-(BOOL) registerLocalSpeakerEventListener:(id<VCEndpointIRegisterLocalSpeakerEventListener>)endpointIRegisterLocalSpeakerEventListener;
	-(BOOL) registerLocalWindowShareEventListener:(id<VCEndpointIRegisterLocalWindowShareEventListener>)endpointIRegisterLocalWindowShareEventListener;
	-(BOOL) registerLocalWindowShareFrameListener:(VCLocalWindowShare*)localWindowShare EndpointIRegisterLocalWindowShareFrameListener:(id<VCEndpointIRegisterLocalWindowShareFrameListener>)endpointIRegisterLocalWindowShareFrameListener Width:(unsigned int)width Height:(unsigned int)height FrameInterval:(long)frameInterval;
	-(BOOL) registerLogEventListener:(id<VCEndpointIRegisterLogEventListener>)endpointIRegisterLogEventListener Filter:(const char*)filter;
	-(BOOL) registerNetworkInterfaceEventListener:(id<VCEndpointIRegisterNetworkInterfaceEventListener>)endpointIRegisterNetworkInterfaceEventListener;
	-(BOOL) registerRemoteCameraEventListener:(id<VCEndpointIRegisterRemoteCameraEventListener>)endpointIRegisterRemoteCameraEventListener;
	-(BOOL) registerRemoteCameraFrameListener:(VCRemoteCamera*)remoteCamera EndpointIRegisterRemoteCameraFrameListener:(id<VCEndpointIRegisterRemoteCameraFrameListener>)endpointIRegisterRemoteCameraFrameListener Width:(unsigned int)width Height:(unsigned int)height FrameInterval:(long)frameInterval;
	-(BOOL) registerRemoteMicrophoneEnergyListener:(id<VCEndpointIRegisterRemoteMicrophoneEnergyListener>)endpointIRegisterRemoteMicrophoneEnergyListener;
	-(BOOL) registerRemoteMicrophoneEventListener:(id<VCEndpointIRegisterRemoteMicrophoneEventListener>)endpointIRegisterRemoteMicrophoneEventListener;
	-(BOOL) registerRemoteMicrophoneFrameListener:(VCRemoteMicrophone*)remoteMicrophone EndpointIRegisterRemoteMicrophoneFrameListener:(id<VCEndpointIRegisterRemoteMicrophoneFrameListener>)endpointIRegisterRemoteMicrophoneFrameListener;
	-(BOOL) registerRemoteRendererEventListener:(id<VCEndpointIRegisterRemoteRendererEventListener>)endpointIRegisterRemoteRendererEventListener;
	-(BOOL) registerRemoteSpeakerEventListener:(id<VCEndpointIRegisterRemoteSpeakerEventListener>)endpointIRegisterRemoteSpeakerEventListener;
	-(BOOL) registerRemoteWindowShareEventListener:(id<VCEndpointIRegisterRemoteWindowShareEventListener>)endpointIRegisterRemoteWindowShareEventListener;
	-(BOOL) registerRemoteWindowShareFrameListener:(VCRemoteWindowShare*)remoteWindowShare EndpointIRegisterRemoteWindowShareFrameListener:(id<VCEndpointIRegisterRemoteWindowShareFrameListener>)endpointIRegisterRemoteWindowShareFrameListener Width:(unsigned int)width Height:(unsigned int)height FrameInterval:(long)frameInterval;
	-(void) removeRenderer:(VCLocalRenderer*)localRenderer;
	-(BOOL) selectAudioContentShare:(VCLocalMicrophone*)localMicrophone;
	-(BOOL) selectDefaultCamera;
	-(BOOL) selectDefaultMicrophone;
	-(BOOL) selectDefaultNetworkInterfaceForMedia;
	-(BOOL) selectDefaultNetworkInterfaceForSignaling;
	-(BOOL) selectDefaultSpeaker;
	-(BOOL) selectLocalCamera:(VCLocalCamera*)localCamera;
	-(BOOL) selectLocalMicrophone:(VCLocalMicrophone*)localMicrophone;
	-(BOOL) selectLocalMonitor:(VCLocalMonitor*)localMonitor;
	-(BOOL) selectLocalSpeaker:(VCLocalSpeaker*)localSpeaker;
	-(BOOL) selectLocalWindowShare:(VCLocalWindowShare*)localWindowShare;
	-(BOOL) selectNetworkInterfaceForMedia:(VCNetworkInterface*)networkInterface;
	-(BOOL) selectNetworkInterfaceForSignaling:(VCNetworkInterface*)networkInterface;
	-(BOOL) selectVideoContentShare:(VCLocalCamera*)localCamera;
	-(BOOL) setAdvancedOptions:(const char*)options;
	-(BOOL) setApplicationTag:(const char*)applicationTag;
	-(BOOL) setCameraNudgeConfiguration:(const char*)cameraNudgeConfig;
	-(BOOL) setCameraPrivacy:(BOOL)privacy;
	-(BOOL) setConsoleLoggerFilter:(const char*)consoleLogFilter;
	-(BOOL) setConsoleLoggerLevelAndCategory:(const char*)levelName CategoryName:(const char*)categoryName On:(BOOL)on;
	-(BOOL) setConsoleLoggerUTC:(BOOL)utc;
	-(BOOL) setCpuTradeOffProfile:(VCEndpointTradeOffProfile)profile;
	-(BOOL) setDebugFilter:(const char*)debugLogFilter;
	-(BOOL) setFileLoggerFilter:(const char*)logFileFilter;
	-(BOOL) setFileLoggerLevelAndCategory:(const char*)levelName CategoryName:(const char*)categoryName On:(BOOL)on;
	-(BOOL) setFileLoggerRotationParameters:(size_t)maxSize WrapPeriod:(long)wrapPeriod WrapCount:(size_t)wrapCount;
	-(BOOL) setFileLoggerUTC:(BOOL)utc;
	-(BOOL) setLicenseKey:(NSMutableString*)licenseKey;
	-(BOOL) setLocation:(double)latitude Longitude:(double)longitude;
	-(void) setMaxBitRate:(unsigned int)bitRate;
	-(BOOL) setMicrophonePrivacy:(BOOL)privacy;
	-(BOOL) setMode:(VCEndpointMode)mode;
	-(BOOL) setPool:(NSString*)name;
	-(BOOL) setPreview:(BOOL)preview;
	-(BOOL) setProductInfo:(NSMutableArray*)productInfo SupportedFeature:(NSMutableArray*)supportedFeature;
	-(BOOL) setSpeakerPrivacy:(BOOL)privacy;
	-(BOOL) setTURNAddressCredentials:(const char*)turnAddress Port:(unsigned int)port Username:(const char*)username Password:(const char*)password BaseTransport:(VCEndpointBaseTransportType)baseTransport;
	-(BOOL) setTURNServerCertificateRequired:(BOOL)required;
	-(BOOL) setViewAnimationSpeed:(void*)viewId SpeedPercentage:(unsigned int)speedPercentage;
	-(BOOL) setViewBackgroundColor:(void*)viewId Red:(unsigned char)red Green:(unsigned char)green Blue:(unsigned char)blue;
	-(BOOL) showAudioMeters:(void*)viewId ShowMeters:(BOOL)showMeters;
	-(BOOL) showPreview:(BOOL)preview;
	-(BOOL) showViewAt:(void*)viewId X:(int)x Y:(int)y Width:(unsigned int)width Height:(unsigned int)height;
	-(BOOL) showViewLabel:(void*)viewId ShowLabel:(BOOL)showLabel;
	-(BOOL) showWindowSharePreview:(BOOL)preview;
	-(BOOL) startLocalCameraDetection;
	-(BOOL) startLocalMicrophoneDetection;
	-(BOOL) startLocalMonitorDetection;
	-(BOOL) startLocalSpeakerDetection;
	-(BOOL) startLocalWindowShareDetection;
	-(BOOL) startLocationDetection;
	-(void) stopLocalCameraDetection;
	-(void) stopLocalMicrophoneDetection;
	-(void) stopLocalMonitorDetection;
	-(void) stopLocalSpeakerDetection;
	-(void) stopLocalWindowShareDetection;
	-(void) stopLocationDetection;
	-(BOOL) unregisterLocalCameraEventListener;
	-(BOOL) unregisterLocalCameraFrameListener:(VCLocalCamera*)localCamera;
	-(BOOL) unregisterLocalMicrophoneEnergyListener;
	-(BOOL) unregisterLocalMicrophoneEventListener;
	-(BOOL) unregisterLocalMicrophoneFrameListener:(VCLocalMicrophone*)localMicrophone;
	-(BOOL) unregisterLocalMonitorEventListener;
	-(BOOL) unregisterLocalMonitorFrameListener:(VCLocalMonitor*)localMonitor;
	-(BOOL) unregisterLocalRendererEventListener;
	-(BOOL) unregisterLocalSpeakerEventListener;
	-(BOOL) unregisterLocalWindowShareEventListener;
	-(BOOL) unregisterLocalWindowShareFrameListener:(VCLocalWindowShare*)localWindowShare;
	-(BOOL) unregisterLogEventListener;
	-(BOOL) unregisterNetworkInterfaceEventListener;
	-(BOOL) unregisterRemoteCameraEventListener;
	-(BOOL) unregisterRemoteCameraFrameListener:(VCRemoteCamera*)remoteCamera;
	-(BOOL) unregisterRemoteMicrophoneEnergyListener;
	-(BOOL) unregisterRemoteMicrophoneEventListener;
	-(BOOL) unregisterRemoteMicrophoneFrameListener:(VCRemoteMicrophone*)remoteMicrophone;
	-(BOOL) unregisterRemoteRendererEventListener;
	-(BOOL) unregisterRemoteSpeakerEventListener;
	-(BOOL) unregisterRemoteWindowShareEventListener;
	-(BOOL) unregisterRemoteWindowShareFrameListener:(VCRemoteWindowShare*)remoteWindowShare;
	-(BOOL) validateLicenseKey:(NSString*)licenseKey UserName:(NSString*)userName;
	-(id) initWithObject:(void*)rPtr;
	-(void*)getObjectPtr;
@end
@interface VCLoggerCategory : NSObject
{
}

	@property const char* description;
	@property NSMutableArray* levels;
	@property const char* name;
@end
@protocol VCRoomIAcceptIncoming

	-(void) onIncomingEntered:(VCRoomEnterResult)result;
	-(void) onIncomingExited:(VCRoomExitReason)reason;
@end
@protocol VCRoomIAcquireMediaRoute

	-(void) onMediaRouteAcquired;
	-(void) onMediaRouteAcquireFailed:(VCRoomMediaFailReason)reason;
@end
@protocol VCRoomIDelete

	-(void) onDeleteResult:(VCRoomDeleteResult)result;
@end
@protocol VCRoomIEnableMedia

	-(void) onMediaEnabled;
	-(void) onMediaFailed:(VCRoomMediaFailReason)reason;
	-(void) onMediaDisabled:(VCRoomMediaDisableReason)reason;
@end
@protocol VCRoomIEnter

	-(void) onEntered:(VCRoomEnterResult)result;
	-(void) onExited:(VCRoomExitReason)reason;
@end
@protocol VCRoomIGetHistory

	-(void) onGetHistoryResults:(NSMutableArray*)records HistorySize:(long long)historySize Result:(VCRoomSearchResult)result;
@end
@protocol VCRoomIGetRoomProperties

	-(void) onGetRoomPropertiesResult:(VCRoomGetPropertiesResult)result RoomProperties:(VCRoomProperties*)roomProperties;
@end
@protocol VCRoomIInvite

	-(void) onInviteResult:(NSMutableString*)inviteeId Result:(VCRoomInviteResult)result;
@end
@protocol VCRoomIMessageSearch

	-(void) onMessageSearchResults:(const char*)searchText Records:(NSMutableArray*)records Result:(VCRoomSearchResult)result;
@end
@protocol VCRoomIRegisterMessageEventListener

	-(void) onMessageReceived:(VCParticipant*)participant ChatMessage:(VCChatMessage*)chatMessage;
	-(void) onMessageAcknowledged:(VCChatMessage*)chatMessage;
	-(void) onMessageRead:(VCParticipant*)participant MessageId:(long long)messageId;
	-(void) onMessageTypingIndication:(VCParticipant*)participant TypingIndication:(VCChatMessageTypingIndication)typingIndication;
@end
@protocol VCRoomIRegisterParticipantEventListener

	-(void) onParticipantJoined:(VCParticipant*)participant;
	-(void) onParticipantLeft:(VCParticipant*)participant;
	-(void) onDynamicParticipantChanged:(NSMutableArray*)selectedParticipants;
	-(void) onLoudestParticipantChanged:(VCParticipant*)participant IsAudioOnly:(BOOL)isAudioOnly IsStatic:(BOOL)isStatic;
@end
@protocol VCRoomIRegisterPipEventListener

	-(void) onPipLocationChanged:(int)x Y:(int)y Width:(unsigned int)width Height:(unsigned int)height IsExpanded:(BOOL)isExpanded;
@end
@protocol VCRoomIRegisterRecorderInCallEventListener

	-(void) recorderInCall:(BOOL)recorderInCall;
@end
@protocol VCRoomIRegisterResourceManagerEventListener

	-(void) onAvailableResourcesChanged:(unsigned int)cpuEncode CpuDecode:(unsigned int)cpuDecode BandwidthSend:(unsigned int)bandwidthSend BandwidthReceive:(unsigned int)bandwidthReceive;
	-(void) onMaxRemoteSourcesChanged:(unsigned int)maxRemoteSources;
@end
@protocol VCRoomIRegisterRoomPropertiesEventListener

	-(void) onRoomPropertiesChanged:(VCRoomProperties*)roomProperties;
@end
@protocol VCRoomIRegisterSubjectEventListener

	-(void) onSetSubject:(const char*)subject;
@end
@protocol VCRoomIRegisterUnprocessedAudioEventListener

	-(void) onUnprocessedAudioSupportChanged:(BOOL)supported;
	-(void) onUnprocessedAudioStarted:(BOOL)started;
@end
@protocol VCRoomISetFavorite

	-(void) onSetFavoriteResult:(BOOL)isFavorite Result:(VCRoomSetFavoriteResult)result;
@end
@protocol VCRoomISetRoomProperties

	-(void) onSetRoomPropertiesResult:(VCRoomSetPropertiesResult)result;
@end
@interface VCRoom : NSObject
{
	void* objPtr;
	@public
	id<VCRoomIAcceptIncoming> roomIAcceptIncoming;
	id<VCRoomIAcquireMediaRoute> roomIAcquireMediaRoute;
	id<VCRoomIDelete> roomIDelete;
	id<VCRoomIEnableMedia> roomIEnableMedia;
	id<VCRoomIEnter> roomIEnter;
	id<VCRoomIGetHistory> roomIGetHistory;
	id<VCRoomIGetRoomProperties> roomIGetRoomProperties;
	id<VCRoomIInvite> roomIInvite;
	id<VCRoomIMessageSearch> roomIMessageSearch;
	id<VCRoomIRegisterMessageEventListener> roomIRegisterMessageEventListener;
	id<VCRoomIRegisterParticipantEventListener> roomIRegisterParticipantEventListener;
	id<VCRoomIRegisterPipEventListener> roomIRegisterPipEventListener;
	id<VCRoomIRegisterRecorderInCallEventListener> roomIRegisterRecorderInCallEventListener;
	id<VCRoomIRegisterResourceManagerEventListener> roomIRegisterResourceManagerEventListener;
	id<VCRoomIRegisterRoomPropertiesEventListener> roomIRegisterRoomPropertiesEventListener;
	id<VCRoomIRegisterSubjectEventListener> roomIRegisterSubjectEventListener;
	id<VCRoomIRegisterUnprocessedAudioEventListener> roomIRegisterUnprocessedAudioEventListener;
	id<VCRoomISetFavorite> roomISetFavorite;
	id<VCRoomISetRoomProperties> roomISetRoomProperties;
}

	@property NSMutableString* id;
	@property VCRoomType type;
	-(void) dealloc;
	-(BOOL) acceptIncoming:(id<VCRoomIAcceptIncoming>)roomIAcceptIncoming;
	-(BOOL) acquireMediaRoute:(id<VCRoomIAcquireMediaRoute>)roomIAcquireMediaRoute;
	-(void) addLocalCamera:(VCLocalCamera*)localCamera RemoveOthers:(BOOL)removeOthers;
	-(void) addLocalMicrophone:(VCLocalMicrophone*)localMicrophone RemoveOthers:(BOOL)removeOthers IsAES:(BOOL)isAES;
	-(void) addLocalMonitor:(VCLocalMonitor*)localMonitor RemoveOthers:(BOOL)removeOthers;
	-(void) addLocalRenderer:(VCLocalRenderer*)localRenderer RemoveOthers:(BOOL)removeOthers;
	-(void) addLocalSpeaker:(VCLocalSpeaker*)localSpeaker RemoveOthers:(BOOL)removeOthers IsAES:(BOOL)isAES;
	-(void) addLocalWindowShare:(VCLocalWindowShare*)localWindowShare RemoveOthers:(BOOL)removeOthers;
	-(BOOL) bootAllParticipants:(NSString*)reason;
	-(BOOL) bootParticipant:(NSString*)userId Reason:(NSString*)reason;
	-(BOOL) cancelInvite:(NSString*)inviteeId;
	-(void) delete:(id<VCRoomIDelete>)roomIDelete;
	-(BOOL) disableMedia;
	-(BOOL) enableMedia:(id<VCRoomIEnableMedia>)roomIEnableMedia;
	-(BOOL) enter:(const char*)password RoomIEnter:(id<VCRoomIEnter>)roomIEnter;
	-(BOOL) getHistory:(unsigned int)numMessages RoomIGetHistory:(id<VCRoomIGetHistory>)roomIGetHistory;
	-(BOOL) getHistoryById:(long long)messageId NumMessagesBefore:(unsigned int)numMessagesBefore NumMessagesAfter:(unsigned int)numMessagesAfter RoomIGetHistory:(id<VCRoomIGetHistory>)roomIGetHistory;
	-(BOOL) getHistoryByTime:(long)time NumMessagesBefore:(unsigned int)numMessagesBefore NumMessagesAfter:(unsigned int)numMessagesAfter RoomIGetHistory:(id<VCRoomIGetHistory>)roomIGetHistory;
	-(NSString*) getId;
	-(BOOL) getRoomProperties:(id<VCRoomIGetRoomProperties>)roomIGetRoomProperties;
	-(void) getSelectedLocalCameras:(NSMutableArray*)cameras;
	-(void) getSelectedLocalMicrophones:(NSMutableArray*)mics;
	-(void) getSelectedLocalMonitors:(NSMutableArray*)monitors;
	-(void) getSelectedLocalRenderers:(NSMutableArray*)renderers;
	-(void) getSelectedLocalSpeakers:(NSMutableArray*)speakers;
	-(void) getSelectedLocalWindowShares:(NSMutableArray*)windowShares;
	-(BOOL) getStats:(VCRoomStats*)stats;
	-(VCRoomType) getType;
	-(VCUser*) getUser;
	-(void) hideStatisticsDialog;
	-(BOOL) invite:(NSString*)userId Message:(const char*)message RoomIInvite:(id<VCRoomIInvite>)roomIInvite;
	-(BOOL) inviteAll:(const char*)message RoomIInvite:(id<VCRoomIInvite>)roomIInvite;
	-(BOOL) inviteN:(NSMutableArray*)userIds Message:(const char*)message RoomIInvite:(id<VCRoomIInvite>)roomIInvite;
	-(BOOL) leave;
	-(BOOL) messageSearch:(const char*)searchText Index:(unsigned int)index PageSize:(unsigned int)pageSize RoomIMessageSearch:(id<VCRoomIMessageSearch>)roomIMessageSearch;
	-(BOOL) registerMessageEventListener:(id<VCRoomIRegisterMessageEventListener>)roomIRegisterMessageEventListener;
	-(BOOL) registerParticipantEventListener:(id<VCRoomIRegisterParticipantEventListener>)roomIRegisterParticipantEventListener;
	-(BOOL) registerPipEventListener:(id<VCRoomIRegisterPipEventListener>)roomIRegisterPipEventListener;
	-(BOOL) registerRecorderInCallEventListener:(id<VCRoomIRegisterRecorderInCallEventListener>)roomIRegisterRecorderInCallEventListener;
	-(BOOL) registerResourceManagerEventListener:(id<VCRoomIRegisterResourceManagerEventListener>)roomIRegisterResourceManagerEventListener;
	-(BOOL) registerRoomPropertiesEventListener:(id<VCRoomIRegisterRoomPropertiesEventListener>)roomIRegisterRoomPropertiesEventListener;
	-(BOOL) registerSubjectEventListener:(id<VCRoomIRegisterSubjectEventListener>)roomIRegisterSubjectEventListener;
	-(BOOL) registerUnprocessedAudioEventListener:(id<VCRoomIRegisterUnprocessedAudioEventListener>)roomIRegisterUnprocessedAudioEventListener;
	-(BOOL) rejectIncoming;
	-(void) removeLocalCamera:(VCLocalCamera*)localCamera;
	-(void) removeLocalMicrophone:(VCLocalMicrophone*)localMicrophone;
	-(void) removeLocalMonitor:(VCLocalMonitor*)localMonitor;
	-(void) removeLocalRenderer:(VCLocalRenderer*)localRenderer;
	-(void) removeLocalSpeaker:(VCLocalSpeaker*)localSpeaker;
	-(void) removeLocalWindowShare:(VCLocalWindowShare*)localWindowShare;
	-(BOOL) reportLocalParticipantOnJoined:(BOOL)reportLocalParticipant;
	-(void) resizeStatisticsDialog:(int)width Height:(int)height;
	-(BOOL) sendMessage:(const char*)message;
	-(BOOL) sendMessageAcknowledged:(long long)messageId;
	-(BOOL) sendMessageTypingIndication:(VCChatMessageTypingIndication)typingIndication;
	-(BOOL) setDynamicGenerationPosition:(unsigned int)generation X:(int)x Y:(int)y Width:(unsigned int)width Height:(unsigned int)height FrameInterval:(long)frameInterval;
	-(BOOL) setDynamicLocalRenderer:(VCLocalRenderer*)renderer;
	-(void) setFavorite:(BOOL)isFavorite RoomISetFavorite:(id<VCRoomISetFavorite>)roomISetFavorite;
	-(BOOL) setMaxAudioSources:(unsigned int)count;
	-(void) setMaxBitRate:(unsigned int)bitRate;
	-(BOOL) setMaxVideoSources:(unsigned int)count;
	-(BOOL) setRoomProperties:(VCRoomProperties*)roomProperties RoomISetRoomProperties:(id<VCRoomISetRoomProperties>)roomISetRoomProperties;
	-(BOOL) setSubject:(const char*)subject;
	-(void) showStatisticsDialog;
	-(BOOL) unregisterMessageEventListener;
	-(BOOL) unregisterParticipantEventListener;
	-(BOOL) unregisterPipEventListener;
	-(BOOL) unregisterRecorderInCallEventListener;
	-(BOOL) unregisterResourceManagerEventListener;
	-(BOOL) unregisterRoomPropertiesEventListener;
	-(BOOL) unregisterSubjectEventListener;
	-(BOOL) unregisterUnprocessedAudioEventListener;
	-(id) initWithObject:(void*)rPtr;
	-(void*)getObjectPtr;
@end
@interface VCGenerationDiff : NSObject
{
}

	@property int newIndex;
	@property int oldIndex;
	@property VCParticipant* participant;
@end
@protocol VCUserIAdvancedSearchRooms

	-(void) onRoomSearchResults:(const char*)searchText SearchResult:(VCUserSearchResult)searchResult RoomInfo:(NSMutableArray*)roomInfo NumRecords:(size_t)numRecords;
@end
@protocol VCUserIAdvancedSearchUsers

	-(void) onUserSearchResults:(const char*)searchText SearchResult:(VCUserSearchResult)searchResult Contacts:(NSMutableArray*)contacts NumRecords:(size_t)numRecords;
@end
@protocol VCUserICreateCall

	-(void) onCallCreated:(VCCall*)call Result:(VCUserCallCreateResult)result CreateToken:(NSString*)createToken;
@end
@protocol VCUserICreateRoomFromId

	-(void) onRoomCreated:(VCRoom*)room Result:(VCUserRoomCreateResult)result CreateToken:(NSString*)createToken;
@end
@protocol VCUserIGetAuthTypes

	-(void) onAuthTypes:(VCUserGetAuthTypesResult)result AuthTypes:(NSMutableArray*)authTypes;
	-(void) onAuthTypesWebProxyCredentialsRequest:(NSMutableString*)webProxyAddress;
@end
@protocol VCUserIGetContact

	-(void) onGetContactResult:(VCContact*)contact Result:(VCUserGetContactResult)result;
@end
@protocol VCUserIGetFavoriteRooms

	-(void) onFavoriteRoomResults:(VCUserSearchResult)searchResult RoomInfo:(NSMutableArray*)roomInfo;
@end
@protocol VCUserIGetPasswordResetUrl

	-(void) onPasswordResetUrl:(NSMutableString*)passwordResetUrl;
@end
@protocol VCUserIGetRecentRooms

	-(void) onRecentRoomResults:(VCUserSearchResult)searchResult RoomInfo:(NSMutableArray*)roomInfo;
@end
@protocol VCUserILogin

	-(void) onLoginComplete:(VCUserLoginResult)result Secure:(BOOL)secure Capabilities:(VCTenantCapabilities*)capabilities;
	-(void) onLoggedOut:(VCUserLogoutReason)reason;
	-(void) onConnectionStatusChanged:(VCUserConnectionStatusChangedReason)reason;
	-(void) onTokenReceived:(NSMutableString*)token TokenType:(VCUserTokenType)tokenType;
	-(void) onWebProxyCredentialsRequest:(NSMutableString*)webProxyAddress;
@end
@protocol VCUserIRegisterCallEventListener

	-(void) onCallCreatedByInvite:(VCCall*)call Inviter:(VCContact*)inviter;
@end
@protocol VCUserIRegisterContactEventListener

	-(void) onUpdateSelf:(VCContact*)contact;
	-(void) onUpdateRosterContact:(VCContact*)contact;
	-(void) onRemoveRosterContact:(NSString*)uri;
@end
@protocol VCUserIRegisterLicenseEventListener

	-(void) onLicenseReceived:(NSString*)licenseKey;
	-(void) onGetLicenseKey:(NSMutableString*)licenseKey;
@end
@protocol VCUserIRegisterRoomEventListener

	-(void) onRoomCreatedByInvite:(VCRoom*)room Inviter:(VCContact*)inviter Message:(const char*)message;
	-(void) onRoomInviteCancelled:(VCRoomInfo*)roomInfo Message:(const char*)message;
@end
@interface VCUser : NSObject
{
	void* objPtr;
	@public
	id<VCUserIAdvancedSearchRooms> userIAdvancedSearchRooms;
	id<VCUserIAdvancedSearchUsers> userIAdvancedSearchUsers;
	id<VCUserICreateCall> userICreateCall;
	id<VCUserICreateRoomFromId> userICreateRoomFromId;
	id<VCUserIGetAuthTypes> userIGetAuthTypes;
	id<VCUserIGetContact> userIGetContact;
	id<VCUserIGetFavoriteRooms> userIGetFavoriteRooms;
	id<VCUserIGetPasswordResetUrl> userIGetPasswordResetUrl;
	id<VCUserIGetRecentRooms> userIGetRecentRooms;
	id<VCUserILogin> userILogin;
	id<VCUserIRegisterCallEventListener> userIRegisterCallEventListener;
	id<VCUserIRegisterContactEventListener> userIRegisterContactEventListener;
	id<VCUserIRegisterLicenseEventListener> userIRegisterLicenseEventListener;
	id<VCUserIRegisterRoomEventListener> userIRegisterRoomEventListener;
}

	-(id) init:(VCEndpoint*)endpoint;
	-(void) dealloc;
	-(BOOL) addRosterContact:(NSString*)userId;
	-(BOOL) advancedSearchRooms:(NSMutableArray*)fieldSet FieldRelations:(NSMutableArray*)fieldRelations FieldValues:(NSMutableArray*)fieldValues SearchToken:(const char*)searchToken Index:(unsigned int)index PageSize:(unsigned int)pageSize UserIAdvancedSearchRooms:(id<VCUserIAdvancedSearchRooms>)userIAdvancedSearchRooms;
	-(BOOL) advancedSearchUsers:(NSMutableArray*)fieldSet FieldValues:(NSMutableArray*)fieldValues SearchToken:(const char*)searchToken Index:(unsigned int)index PageSize:(unsigned int)pageSize UserIAdvancedSearchUsers:(id<VCUserIAdvancedSearchUsers>)userIAdvancedSearchUsers;
	-(BOOL) allowSubscriber:(NSString*)userId;
	-(BOOL) blockSubscriber:(NSString*)userId;
	-(BOOL) createCall:(NSString*)userId CreateToken:(NSMutableString*)createToken UserICreateCall:(id<VCUserICreateCall>)userICreateCall;
	-(BOOL) createRoomFromId:(const char*)id CreateToken:(NSMutableString*)createToken UserICreateRoomFromId:(id<VCUserICreateRoomFromId>)userICreateRoomFromId;
	-(BOOL) createRoomFromKey:(const char*)roomKey CreateToken:(NSMutableString*)createToken UserICreateRoomFromId:(id<VCUserICreateRoomFromId>)userICreateRoomFromId;
	-(BOOL) createRoomWithId:(const char*)id CreateToken:(const char*)createToken UserICreateRoomFromId:(id<VCUserICreateRoomFromId>)userICreateRoomFromId;
	-(BOOL) createScheduledRoom:(VCEventSchedule*)schedule CreateToken:(NSString*)createToken UserICreateRoomFromId:(id<VCUserICreateRoomFromId>)userICreateRoomFromId;
	-(BOOL) createTestCallRoom:(NSMutableString*)createToken UserICreateRoomFromId:(id<VCUserICreateRoomFromId>)userICreateRoomFromId;
	-(BOOL) createTopicRoom:(const char*)name Description:(const char*)description CreateToken:(NSMutableString*)createToken UserICreateRoomFromId:(id<VCUserICreateRoomFromId>)userICreateRoomFromId;
	-(BOOL) getAuthTypes:(const char*)host Port:(unsigned int)port ServiceType:(const char*)serviceType UserIGetAuthTypes:(id<VCUserIGetAuthTypes>)userIGetAuthTypes;
	-(BOOL) getContact:(NSString*)userId UserIGetContact:(id<VCUserIGetContact>)userIGetContact;
	-(BOOL) getConversationRoom:(NSMutableArray*)userIds CreateToken:(NSMutableString*)createToken UserICreateRoomFromId:(id<VCUserICreateRoomFromId>)userICreateRoomFromId;
	-(BOOL) getCurrentRoster:(NSMutableArray*)roster;
	-(VCEndpoint*) getEndpoint;
	-(BOOL) getFavoriteRooms:(unsigned int)index PageSize:(unsigned int)pageSize UserIGetFavoriteRooms:(id<VCUserIGetFavoriteRooms>)userIGetFavoriteRooms;
	-(NSString*) getId;
	-(BOOL) getPasswordResetUrl:(id<VCUserIGetPasswordResetUrl>)userIGetPasswordResetUrl;
	-(BOOL) getRecentRooms:(unsigned int)index PageSize:(unsigned int)pageSize UserIGetRecentRooms:(id<VCUserIGetRecentRooms>)userIGetRecentRooms;
	-(BOOL) getStats:(VCUserStats*)stats;
	-(NSString*) getWebProxyAddress;
	-(BOOL) invalidateTokenOnLogout:(BOOL)invalidate;
	-(BOOL) login:(const char*)username Password:(const char*)password Host:(const char*)host Port:(unsigned int)port ServiceType:(const char*)serviceType UserILogin:(id<VCUserILogin>)userILogin;
	-(BOOL) loginAsGuest:(const char*)displayName RoomKey:(const char*)roomKey Host:(const char*)host Port:(unsigned int)port ServiceType:(const char*)serviceType UserILogin:(id<VCUserILogin>)userILogin;
	-(BOOL) loginWithAccessToken:(const char*)accessToken Host:(const char*)host Port:(unsigned int)port ServiceType:(const char*)serviceType UserILogin:(id<VCUserILogin>)userILogin;
	-(BOOL) loginWithCAC:(const char*)certificate Host:(const char*)host Port:(unsigned int)port ServiceType:(const char*)serviceType UserILogin:(id<VCUserILogin>)userILogin;
	-(BOOL) loginWithRefreshToken:(const char*)refreshToken Host:(const char*)host Port:(unsigned int)port ServiceType:(const char*)serviceType UserILogin:(id<VCUserILogin>)userILogin;
	-(BOOL) loginWithSAML:(const char*)key Host:(const char*)host Port:(unsigned int)port ServiceType:(const char*)serviceType UserILogin:(id<VCUserILogin>)userILogin;
	-(BOOL) loginWithTenantToken:(const char*)provisionToken Host:(const char*)host Port:(unsigned int)port ServiceType:(const char*)serviceType UserILogin:(id<VCUserILogin>)userILogin;
	-(BOOL) logout;
	-(BOOL) pauseUpdateNotification:(BOOL)pauseUpdateNotification;
	-(BOOL) registerCallEventListener:(id<VCUserIRegisterCallEventListener>)userIRegisterCallEventListener;
	-(BOOL) registerContactEventListener:(id<VCUserIRegisterContactEventListener>)userIRegisterContactEventListener;
	-(BOOL) registerLicenseEventListener:(id<VCUserIRegisterLicenseEventListener>)userIRegisterLicenseEventListener;
	-(BOOL) registerRoomEventListener:(id<VCUserIRegisterRoomEventListener>)userIRegisterRoomEventListener;
	-(BOOL) removeRosterContact:(NSString*)userId;
	-(BOOL) searchConversationRooms:(const char*)searchText Index:(unsigned int)index PageSize:(unsigned int)pageSize UserIAdvancedSearchRooms:(id<VCUserIAdvancedSearchRooms>)userIAdvancedSearchRooms;
	-(BOOL) searchRooms:(const char*)searchText Index:(unsigned int)index PageSize:(unsigned int)pageSize UserIAdvancedSearchRooms:(id<VCUserIAdvancedSearchRooms>)userIAdvancedSearchRooms;
	-(BOOL) searchRoomsWithName:(const char*)searchText Index:(unsigned int)index PageSize:(unsigned int)pageSize UserIAdvancedSearchRooms:(id<VCUserIAdvancedSearchRooms>)userIAdvancedSearchRooms;
	-(BOOL) searchRoomsWithOwner:(const char*)searchText Index:(unsigned int)index PageSize:(unsigned int)pageSize UserIAdvancedSearchRooms:(id<VCUserIAdvancedSearchRooms>)userIAdvancedSearchRooms;
	-(BOOL) searchRoomsWithSubject:(const char*)searchText Index:(unsigned int)index PageSize:(unsigned int)pageSize UserIAdvancedSearchRooms:(id<VCUserIAdvancedSearchRooms>)userIAdvancedSearchRooms;
	-(BOOL) searchTopicRooms:(const char*)searchText Index:(unsigned int)index PageSize:(unsigned int)pageSize UserIAdvancedSearchRooms:(id<VCUserIAdvancedSearchRooms>)userIAdvancedSearchRooms;
	-(BOOL) searchUsers:(const char*)searchText Index:(unsigned int)index PageSize:(unsigned int)pageSize UserIAdvancedSearchUsers:(id<VCUserIAdvancedSearchUsers>)userIAdvancedSearchUsers;
	-(void) setCA:(const char*)ca CaFilePath:(const char*)caFilePath CaDir:(const char*)caDir;
	-(void) setDisplayName:(const char*)displayName;
	-(void) setTCPTransport:(BOOL)enable;
	-(void) setUDPTransport:(BOOL)enable;
	-(void) setWebProxyAddressCredentials:(const char*)proxyAddress Username:(const char*)username Password:(const char*)password;
	-(void) setWebProxyTransport:(BOOL)enable;
	-(BOOL) unregisterCallEventListener;
	-(BOOL) unregisterContactEventListener;
	-(BOOL) unregisterLicenseEventListener;
	-(BOOL) unregisterRoomEventListener;
	-(BOOL) updatePresence:(VCContactPresenceState)state Status:(const char*)status;
	-(id) initWithObject:(void*)rPtr;
	-(void*)getObjectPtr;
@end
@interface VCTenantCapabilities : NSObject
{
}

	@property NSMutableArray* LoginAttemptInfo;
	@property NSMutableString* WSGMicroserviceAddress;
	@property NSMutableString* changePasswordUrl;
	@property NSMutableArray* endpointBehavior;
	@property BOOL isCreatePublicRoomEnabled;
	@property BOOL isGuestEnabled;
	@property BOOL isLoginBannerEnabled;
	@property BOOL isOpusAudioEnabled;
	@property BOOL isPersonalRoomEnabled;
	@property BOOL isPublicChatEnabled;
	@property BOOL isRoomModerationEnabled;
	@property BOOL isScheduledRoomEnabled;
	@property BOOL isSdk220Enabled;
	@property BOOL isTestCallEnabled;
	@property BOOL isWSGMicroserviceEnabled;
	@property BOOL isWelcomeBannerEnabled;
	@property NSMutableString* loginBannerData;
	@property int maximumRoomPinLength;
	@property int minimumRoomPinLength;
	@property NSMutableString* welcomeBannerData;
@end
@interface VCUserAuthenticationInfo : NSObject
{
}

	@property VCUserAuthType authType;
	@property VCProperty* property;
@end
@interface VCUserLoginInfo : NSObject
{
}

	@property NSMutableString* result;
	@property NSMutableString* sourceIp;
	@property NSMutableString* timestamp;
@end
